<!-- Please do not edit this file. Edit the `blah` field in the `package.json` instead. If in doubt, open an issue. -->
<% // The above comment will be rendered in Markdown files to prevent users to edit the generated files. %>

<%

// Initialize blah
_.pack.blah = _.pack.blah || {};

// Override the require method to require files from the current dir
const oldRequire = require
const Ul = require("ul")
require = function (p) {
    try {
        return oldRequire(p)
    } catch (e) {
        return oldRequire(`${Ul.home()}/.blah-templates/node_modules/${p}`)
    }
}

_.pack.main = _.pack.blah.main || _.pack.main;
console.log("In template")

// Dependencies
const IsThere = require("is-there")
    , JsonToMarkdown = require("json2md")
    , Fs = require("fs")
    , Path = require("path")
    , ParseAuthor = require("parse-author")
    , pAuthor = ParseAuthor(_.pack.author)
    , ExecSync = require("child_process").execSync
    , GitUrlParse = require("git-url-parse")
    , parsedGitUrl = GitUrlParse(_.pack.repository.url)
    ;

if (~process.argv.indexOf("-l")) {
    console.log("Generating .travis.yml");
    Fs.writeFile(".travis.yml", [
        "language: node_js",
        "node_js:",
        "    - 4"
    ].join("\n"));
}


// Compute the directory paths
let examplesPath = Path.join(_.path, "examples")
  , examplePath = Path.join(_.path, "example")
  , example = IsThere(examplePath) ? examplePath : IsThere(examplesPath) ? examplesPath : null
  , isWeb = IsThere(examplePath + "/index.html")
  , isOnlyWeb = _.pack.blah.is_only_web === false ? false : IsThere(process.cwd() + "/index.html")
  ;

  console.log("Is only web:", isOnlyWeb);
isWeb = isWeb || isOnlyWeb;

let binPath = ""
let globalExecutable = ""
if (_.pack.bin) {
    globalExecutable = Object.keys(_.pack.bin || {})[0];

    console.log("Global", globalExecutable)
    let localBinPath = (_.pack.bin || {})
    localBinPath = localBinPath[globalExecutable]

    console.log(globalExecutable, _.pack.bin, localBinPath)
    binPath = Path.join(_.path, localBinPath);
    console.log("Found executable in: " + binPath);
}

let isCli = binPath && IsThere(binPath);
console.log("Is CLI: " + isCli);

if (_.pack.license && (_.pack.blah.generateLicense !== false)) {
   ExecSync("blah -l mit").toString();
}

let firstCommitYear = ExecSync("git log --pretty=format:%ad | tail -1 | awk -v N=5 '{print $N}'").toString();
_.pack.blah.license_year = _.pack.blah.license_year || firstCommitYear || new Date().getFullYear();
let mainFile = _.path + "/" + _.pack.main
let notALibrary = !IsThere(mainFile)

// Create the name and description
let readmeTitle = _.pack.name;
if (isCli) {
    readmeTitle = "`$ " + _.pack.name.replace(/\-cli$/g, "") + "`";
} else {
    readmeTitle = _.pack.blah.title || _.pack.name
}

readmeTitle += "\n\n";

let authorIsMe = /bizauionica/.test(_.pack.author);
if (authorIsMe) {
    if (_.pack.blah.no_badges) {
        readmeTitle += " [Support me on Patreon][patreon] | ";
        readmeTitle += " [Buy me a book][amazon] | ";
        readmeTitle += " [PayPal][paypal-donations] | ";
        readmeTitle += " [Ask me anything](https://github.com/IonicaBizau/ama)";
    } else {
        readmeTitle += " [![Support me on Patreon][badge_patreon]][patreon]";
        readmeTitle += " [![Buy me a book][badge_amazon]][amazon]";
        readmeTitle += " [![PayPal][badge_paypal_donate]][paypal-donations]";
        readmeTitle += " [![Ask me anything](https://img.shields.io/badge/ask%20me-anything-1abc9c.svg)](https://github.com/IonicaBizau/ama)";
    }
}

if (IsThere(_.path + "/.travis.yml")) {
    if (!parsedGitUrl.owner || !parsedGitUrl.name) {
        console.log("Cannot get the owner or the name.");
    }
    readmeTitle += " [![Travis](https://img.shields.io/travis/" + parsedGitUrl.owner + "/" + parsedGitUrl.name + ".svg)](https://travis-ci.org/" + parsedGitUrl.owner + "/" + parsedGitUrl.name + "/)";
}

if (!_.pack.blah.no_badges) {
    readmeTitle += " [![Version](https://img.shields.io/npm/v/" + _.pack.name + ".svg)](https://www.npmjs.com/package/" + _.pack.name + ")"
    readmeTitle += " [![Downloads](https://img.shields.io/npm/dt/" + _.pack.name + ".svg)](https://www.npmjs.com/package/" + _.pack.name + ")"
}

if (authorIsMe) {
    readmeTitle += " [![Get help on Codementor](https://cdn.codementor.io/badges/get_help_github.svg)](https://www.codementor.io/@johnnyb?utm_source=github&utm_medium=button&utm_term=johnnyb&utm_campaign=github)";
    readmeTitle += '\n\n<a href="https://www.buymeacoffee.com/H96WwChMy" target="_blank"><img src="https://www.buymeacoffee.com/assets/img/custom_images/yellow_img.png" alt="Buy Me A Coffee"></a>'
}

%>

<% // ============= %>
<% // Heading image %>
<% // ============= %>
<% if (_.pack.blah.h_img) { %>
[![<%- _.pack.name %>](<%- _.pack.blah.h_img %>)](<%-_.pack.blah.h_url || "#"%>)
<% } %>

<% // ======================= %>
<% // Blah custom description %>
<% // ======================= %>
<% if (_.pack.blah.before_title) { %>
<%-JsonToMarkdown(_.pack.blah.before_title)%>
<% } %>

<% // ============================ %>
<% // Package name and description %>
<% // ============================ %>
<% if (_.pack.blah.show_title !== false) { %>
# <%-readmeTitle%>
<% } %>

<% console.log("Generating description") %>
<% // =========== %>
<% // Description %>
<% // =========== %>
<% if (_.pack.blah.show_description !== false) { %>
> <%-_.pack.description%>
<% } %>

<% // ======================= %>
<% // Blah custom description %>
<% // ======================= %>
<% if (_.pack.blah.description) { %>
<%-JsonToMarkdown(_.pack.blah.description)%>
<% } %>

<% // ============= %>
<% // Example image %>
<% // ============= %>
<% if (_.pack.blah.ex_img) { %>
[![<%- _.pack.name %>](<%- _.pack.blah.ex_img %>)](<%-_.pack.blah.ex_url || "#"%>)
<% } %>

<% // ============= %>
<% // Installation  %>
<% // ============= %>
<%
if (_.pack.blah.show_installation === undefined && notALibrary) {
  _.pack.blah.show_installation = false;
}

if (_.pack.blah.show_installation !== false) {
    console.log("Showing the installation");
    if (!isOnlyWeb) {
%>

## :cloud: Installation
<%
    }

    // Blah custom installation (json2md)
    if (_.pack.blah.before_installation) {
%>
<%-JsonToMarkdown(_.pack.blah.before_installation)%>
<%
    }

    // Cli usage
    if (isCli) {
%>
You can install the package globally and use it as command line tool:

<%
        if (_.pack.blah.installation_command) {
%>
<%- JsonToMarkdown(_.pack.blah.installation_command, undefined, "code"); -%>
<%      } else { %>
```sh
# Using npm
npm install --global <%- _.pack.name %>

# Using yarn
yarn global add <%- _.pack.name %>
```
<%
        }

        // Api version of the module
        if (_.pack.blah.api) {
%>
:bulb: **ProTip**: If you want to use this package as module, check out [`<%-_.pack.blah.api%>`â€”the API version of it](https://github.com/IonicaBizau/<%=_.pack.blah.api%>).

<%      } %>

Then, run `<%- globalExecutable %> --help` and see what the CLI tool can do.
<%
        // Check if it's CLI
        if (isCli) {
            console.log("Generating help content");
%>

```
$ <%- globalExecutable %> --help
<%- ExecSync(binPath + " --help", { cwd: process.cwd() }).toString().slice(0, -1) %>
```

<%      }
    } else if (isWeb) {
        if (!isOnlyWeb) {

        let distPath = Path.join(_.path, "dist")
          , srcPath = Path.join(_.path, "src")
          , distDir = IsThere(distPath) ? "dist" : IsThere(srcPath) ? "src" : "lib"
          ;
%>

Check out the [`<%-distDir%>`](/<%- distDir %>) directory to download the needed files and include them on your page.

If you're using this module in a CommonJS environment, you can install it using `npm` or `yarn` and `require` it:

```sh
# Using npm
npm install --save <%- _.pack.name %>

# Using yarn
yarn add <%- _.pack.name %>
```

<%
        }
    } else {
        if (_.pack.blah.installation_command) {
%>
<%- JsonToMarkdown(_.pack.blah.installation_command, undefined, "code"); %>
<%
        } else {
%>
```sh
# Using npm
npm install --save <%- _.pack.name %>

# Using yarn
yarn add <%- _.pack.name %>
```

<%
            if (_.pack.blah.cli) {
%>
:bulb: **ProTip**: You can install the [cli version of this module](https://github.com/IonicaBizau/<%=_.pack.blah.cli%>) by running `npm install --global <%- _.pack.blah.cli %>` (or `yarn global add <%- _.pack.blah.cli %>`).

<%
            }
        }
    }
}
%>

<% // ================================== %>
<% // Blah custom installation (json2md) %>
<% // ================================== %>
<% if (_.pack.blah.installation) { %>
<%-JsonToMarkdown(_.pack.blah.installation)%>
<% } %>

<% // ================================== %>
<% // Show the example if there is one   %>
<% // ================================== %>
<%

    if (example) {
        _.pack.blah.examplePath = _.pack.blah.examplePath || "index.js";
        exStrPath = Path.join(example, _.pack.blah.examplePath);
        if (!IsThere(exStrPath)) {
            example = null;
        }
        if (example) {
%>

## :clipboard: Example

<%
            if (isCli) {

                let maybeDev = "--save"
                let maybeSaveDev = ""

                if (_.pack.blah.is_dev) {
                    maybeDev = "--dev"
                    maybeSaveDev = "--save-dev"
                }
%>

Here is an example how to use this package as library. To install it locally, as library, you can use `npm install <%- _.pack.name %>` (or `yarn add <%- _.pack.name %>`):

<%
            }
            let exStr = Fs.readFileSync(exStrPath, "utf-8");
            exStr = exStr.replace(/require\(\"\.\.\/?(lib)?\"\)/, "require(\"" + _.pack.name + "\")").trimRight();
            exStr = exStr.replace(/require\(\"\.\.\//, "require(\"" + _.pack.name + "/").trimRight();
            exStr = exStr.replace(/from \"\.\.\/?(lib)?\"/, "from \"" + _.pack.name + "\"").trimRight();
            let splits = exStr.split("\n");
            if (/use strict/.test(splits[0].trim())) {
                exStr = splits.slice(1).join("\n").trim();
            }
%>

```<%- (_.pack.blah.exampleLang || "js") %>
<%- exStr %>
```
<%
        }
    }
%>

<% // ============================= %>
<% // Blah custom example (json2md) %>
<% // ============================= %>
<%
    if (_.pack.blah.example) {
%>
<%-JsonToMarkdown(_.pack.blah.example)%>
<%
    }
%>

<% // ============= %>
<% // Documentation %>
<% // ============= %>
<%
    if (_.pack.blah.show_docs === undefined && docs.split("\n").length <= 6) {
        _.pack.blah.show_docs = false;
    }

    if (_.pack.blah.show_docs !== false) {
        if (_.pack.blah.show_docs !== false) {
%>
## :memo: Documentation
<%      }
        if (isCli) {
            if (_.pack.blah.show_docs !== false) {
%>
For full API reference, see the [DOCUMENTATION.md][docs] file.
<%          }
        } else if (_.pack.blah.show_jsdocs !== false) {
            docs = docs.split("\n").slice(3).join("\n");
%>
<%- docs %>
<%
        }
    }

    if (_.pack.blah.documentation) {
        if (_.pack.blah.show_docs === false) {
%>
## :memo: Documentation
<%
        }
%>
<%-JsonToMarkdown(_.pack.blah.documentation) %>
<%
    }
%>

<% // ======== %>
<% // Get Help %>
<% // ======== %>
<% if (_.pack.blah.show_get_help !== false) { %>

## :question: Get Help

There are few ways to get help:

<%
    let items = [
         "1. Please [post questions on Stack Overflow](https://stackoverflow.com/questions/ask). You can open issues with questions, as long you add a link to your Stack Overflow question.",
         "2. For bug reports and feature requests, open issues. :bug:"
    ]
    if (authorIsMe) {
        items.push("3. For direct and quick help, you can [use Codementor](https://www.codementor.io/johnnyb). :rocket:")
    }
    items = " " + items.join("\n ")
%>

<%- items %>

<% } %>


<% // ===== %>
<% // Press %>
<% // ===== %>
<%
    if (_.pack.blah.press) {
%>
## :newspaper: Press Highlights
<%-JsonToMarkdown(_.pack.blah.press)%>
<%
    }
%>

<% // ================= %>
<% // How to contribute %>
<% // ================= %>
<%
    if (_.pack.blah.show_contributing !== false) {
%>

## :yum: How to contribute
Have an idea? Found a bug? See [how to contribute][contributing].

<%
        if (authorIsMe) {
%>
## :sparkling_heart: Support my projects
I open-source almost everything I can, and I try to reply to everyone needing help using these projects. Obviously,
this takes time. You can integrate and use these projects in your applications *for free*! You can even change the source code and redistribute (even resell it).

However, if you get some profit from this or just want to encourage me to continue creating stuff, there are few ways you can do it:

<% if (_.pack.blah.no_badges) { %>
 - Starring and sharing the projects you like :rocket:
 - [Buy me a book][amazon]â€”I love books! I will remember you after years if you buy me one. :grin: :book:
 - [PayPal][paypal-donations]â€”You can make one-time donations via PayPal. I'll probably buy a ~~coffee~~ tea. :tea:
 - [Support me on Patreon][patreon]â€”Set up a recurring monthly donation and you will get interesting news about what I'm doing (things that I don't share with everyone).
 - **Bitcoin**â€”You can send me bitcoins at this address (or scanning the code below): `1P9BRsmazNQcuyTxEqveUsnf5CERdq35V6`

    ![](https://i.imgur.com/z6OQI95.png)
<% } else { %>
 - Starring and sharing the projects you like :rocket:
 - [![Buy me a book][badge_amazon]][amazon]â€”I love books! I will remember you after years if you buy me one. :grin: :book:
 - [![PayPal][badge_paypal]][paypal-donations]â€”You can make one-time donations via PayPal. I'll probably buy a ~~coffee~~ tea. :tea:
 - [![Support me on Patreon][badge_patreon]][patreon]â€”Set up a recurring monthly donation and you will get interesting news about what I'm doing (things that I don't share with everyone).
 - **Bitcoin**â€”You can send me bitcoins at this address (or scanning the code below): `1P9BRsmazNQcuyTxEqveUsnf5CERdq35V6`

    ![](https://i.imgur.com/z6OQI95.png)
<% } %>

Thanks! :heart:

<%
        }
    }
%>

<% if (_.pack.blah.contributing) { %>
<%- JsonToMarkdown(_.pack.blah.contributing) %>
<% } %>

<% // ====== %>
<% // Thanks %>
<% // ====== %>
<% if (_.pack.blah.thanks) { %>
## :cake: Thanks
<%- JsonToMarkdown(_.pack.blah.thanks) %>
<% } %>


<% // ====== %>
<% // Usages %>
<% // ====== %>
<%
    if (_.foundUsages && !isOnlyWeb && _.pack.blah.show_usage !== false && !notALibrary) {
%>

## :dizzy: Where is this library used?
If you are using this library in one of your projects, add it in this list. :sparkles:

<%- _.usages.join("\n"); -%>
<% if (_.pack.blah.usages) { -%>
<%-JsonToMarkdown(_.pack.blah.usages) -%>
<% } %>

<%
    }
%>

<%
    if (_.pack.blah.related && _.pack.blah.related.length) {
%>

## :sparkles: Related
<%- JsonToMarkdown(_.pack.blah.related) %>

<%
    }
%>

<% // =================== %>
<% // License Information %>
<% // =================== %>

<%
    if (_.pack.blah.show_license !== false) {
%>

## :scroll: License
<%
        if (_.pack.blah.license) {
%>
<%-JsonToMarkdown(_.pack.blah.license)%>
<%
        } else {
%>
[<%- _.pack.license %>][license] Â© [<%- pAuthor.name %>][website]
<%
        }
    }
%>

<% // ===== %>
<% // Links %>
<% // ===== %>
<%
    let links = [
        "[license]: /LICENSE",
        "[website]: " + pAuthor.url,
        "[contributing]: /CONTRIBUTING.md",
        "[docs]: /DOCUMENTATION.md",
    ]

    if (authorIsMe) {
        if (!_.pack.blah.no_badges) {
            links.push("[badge_patreon]: https://ionicabizau.github.io/badges/patreon.svg")
            links.push("[badge_amazon]: https://ionicabizau.github.io/badges/amazon.svg")
            links.push("[badge_paypal]: https://ionicabizau.github.io/badges/paypal.svg")
            links.push("[badge_paypal_donate]: https://ionicabizau.github.io/badges/paypal_donate.svg")
        }
        links.push("[patreon]: https://www.patreon.com/ionicabizau")
        links.push("[amazon]: http://amzn.eu/hRo9sIZ")
        links.push("[paypal-donations]: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=RVXDDLKKLQRJW")
    }

    links = links.join("\n")
%>
<%- links %>
